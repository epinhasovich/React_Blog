{"version":3,"sources":["contexts/MyAppContext.js","components/Tweet.js","components/TweetsList.js","components/Profile.js","components/NavBar.js","lib/api.js","App.js","serviceWorker.js","index.js"],"names":["MyAppContext","React","createContext","tweets","addTweet","tweet","Tweet","props","state","content","date","userName","counter","disableButton","overChar","event","this","setState","target","value","length","Consumer","context","className","maxLength","type","placeholder","onChange","handleNewTweet","onClick","disabled","style","display","Component","TweetsList","map","key","Profile","addUser","preventDefault","window","localStorage","setItem","console","log","handleNewUser","NavBar","to","baseUrl","App","newTweet","getItem","Date","toISOString","axios","post","catch","error","alert","loading","bind","getAllTweets","setInterval","get","then","response","data","exact","path","Provider","src","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cc65f84d.chunk.js","sourcesContent":["import React from 'react';\n\nconst MyAppContext = React.createContext ({\n    tweets: [],\n    addTweet: (tweet) => {}\n});\n\nexport default MyAppContext;","import React from 'react';\nimport MyAppContext from '../contexts/MyAppContext';\n\nclass Tweet extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tweet: {\n                content: '',\n                date: '',\n                userName: ''\n            },\n            counter: 0,\n            disableButton: false,\n            overChar: false\n        }\n    }\n\n\nhandleNewTweet(event) {\n    this.setState({ tweet: { content: event.target.value }});\n    if (event.target.value.length > 140){\n        this.setState({\n            disableButton: true,\n            overChar: true\n        })\n    }\n}\n\n\nrender() {\n    const { tweet, disableButton, overChar } = this.state;\n    return (\n        <MyAppContext.Consumer>\n            {context => (\n            <div>\n                <textarea className=\"messageBox\"  maxLength=\"141\" type='text' placeholder=\"What do you have in mind...\" onChange={event => this.handleNewTweet(event)} />\n                <button onClick={() => context.addTweet(tweet)} disabled={disableButton}>Tweet</button>\n                <div className=\"over\" style={{display: overChar ? '' : 'none'}}>The tweet cannot be over 140 characters</div>\n            </div>\n            )}\n            </MyAppContext.Consumer>\n        );\n    }\n}\n\nexport default Tweet;\n    \n","import React from 'react';\nimport MyAppContext from '../contexts/MyAppContext';\n\nclass TweetsList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            \n        }\n    }\n\n    render() {\n        return (\n            <MyAppContext.Consumer>\n                {({ tweets }) => (\n                    <div >\n                        {tweets.map(tweet => (\n                            <div className=\"message\">\n                                <span className=\"username\">{tweet.userName}</span>\n                                <span className=\"date\">{tweet.date}</span>\n                                <p key={tweet.content}>{tweet.content}</p>\n                            </div>\n                        ))} \n                    </div>\n                )}\n            </MyAppContext.Consumer>\n        )\n    }\n}\n\nexport default TweetsList;\n\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link, useParams } from \"react-router-dom\";\n\nclass Profile extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            userName: ''\n        }\n    }\n\n    addUser = event => {\n        event.preventDefault();\n        let userName = this.state.userName;\n        window.localStorage.setItem(\"Username\" , userName)\n    }\n\n    handleNewUser(event) {\n        this.setState({userName: event.target.value });\n        console.log(this.state.userName);\n    }\n\n    render() {\n        const { userName } = this.state;\n        return (\n            <form>\n                <h1 className=\"profile\">Profile</h1>\n                <span className=\"userName\">User Name</span>\n                <textarea className=\"userBox\"  maxLength=\"20\" type='text'  onChange={event => this.handleNewUser(event)} />\n                <button className=\"save\" onClick={this.addUser}>Save</button>\n            </form>\n        );\n    }\n}\n\nexport default Profile;\n\n\n\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link, useParams } from \"react-router-dom\";\nimport Profile from './Profile';\n\nconst NavBar = () => {\n    return (\n        <div className=\"navbar\">\n        <Link className=\"home-menu\" to=\"/\">Home</Link>\n        <Link className=\"profile-menu\" to=\"/profile\">Profile</Link>\n        </div>\n    )\n}\n\nexport default NavBar;","import axios from 'axios';\n\nconst baseUrl = 'https://itc-bootcamp-19-dot-charcha-dev.appspot.com';\n\nexport function getTweet() {\n    return axios.get(`${baseUrl}/tweet`);\n}\n\nexport function createTweet(newTweet) {\n    return axios.post(`${baseUrl}/tweet`, { tweet: newTweet});\n}","import React from 'react';\nimport './App.css';\nimport MyAppContext from './contexts/MyAppContext';\nimport Tweet from './components/Tweet'\nimport TweetsList from './components/TweetsList';\nimport NavBar from './components/NavBar';\nimport { BrowserRouter as Router, Switch, Route, Link, useParams } from \"react-router-dom\";\nimport { getTweet, createTweet } from './lib/api';\nimport Profile from './components/Profile';\nimport { get } from 'http';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tweets: [],\n      loading: true,\n      addTweet: this.handleNewTweet.bind(this),\n      disableButton: true\n    };\n  }\n  \n  componentDidMount() {\n    window.localStorage.setItem(\"Username\", \"Default User\")\n    this.getAllTweets();\n    setInterval(() => this.getAllTweets (), 5000)\n  }\n\n  getAllTweets () {\n    getTweet().then(response => this.setState({ tweets: response.data.tweets, loading: false, disableButton:false }))\n  }\n\n  // componentWillUnmount () {}\n\n  handleNewTweet = (tweet) => {\n    tweet.userName = window.localStorage.getItem(\"Username\");\n    tweet.date = new Date().toISOString();\n    createTweet(tweet).catch(error => alert(\"Error! Wait until previous tweets load...\"));\n    const {tweets} = this.state;\n    this.setState({ tweets: [tweet, ...tweets]})\n  }\n\n  render() {\n    const { loading } = this.state;\n    return (\n      <Router>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <NavBar></NavBar>\n            <Switch>\n              <Route exact path=\"/\">\n                <MyAppContext.Provider value={this.state}>\n                  <Tweet></Tweet>\n                  {loading && <h1 className=\"loading\"><img src=\"https://i.gifer.com/4V0b.gif\"></img></h1>}\n                  {!loading && <TweetsList></TweetsList>}\n                </MyAppContext.Provider>\n              </Route>\n              <Route exact path=\"/profile\"><Profile></Profile> </Route>\n            </Switch>\n          </header>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       tweets: window.localStorage.getItem(\"Tweets\") ? JSON.parse(window.localStorage.getItem(\"Tweets\")): [],\n//       addTweet: this.handleNewTweet.bind(this)\n//     };\n//   }\n\n//   handleNewTweet = (tweet) => {\n//     tweet.userName = \"Eric\";\n//     tweet.date = new Date().toISOString();\n//     let savedTweets = this.state.tweets;\n//     const allTweets = [tweet, ...savedTweets]\n//     window.localStorage.setItem(\"Tweets\", JSON.stringify(allTweets));\n//     this.setState({ tweets: allTweets });\n//   }\n\n// this.setState((prevState) => {\n//   return { tweets: [tweet, ...prevState.tweets] }\n// })\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}